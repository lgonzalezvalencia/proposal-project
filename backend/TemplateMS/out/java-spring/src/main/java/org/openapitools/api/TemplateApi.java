/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Template;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-29T17:41:04.926446513Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
@Validated
@Tag(name = "Template Management", description = "Operations related to template management")
public interface TemplateApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /template : Create a new template
     *
     * @param template  (required)
     * @return Template created successfully (status code 201)
     */
    @Operation(
        operationId = "createTemplate",
        summary = "Create a new template",
        tags = { "Template Management" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Template created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Template.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/template",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Template> createTemplate(
        @Parameter(name = "Template", description = "", required = true) @Valid @RequestBody Template template
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"file_url\" : \"file_url\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"file_location\" : \"file_location\", \"id\" : 0, \"lastModified\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /template/{id} : Get template by ID
     *
     * @param id  (required)
     * @return Template details (status code 200)
     *         or Template not found (status code 404)
     */
    @Operation(
        operationId = "getTemplateById",
        summary = "Get template by ID",
        tags = { "Template Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Template details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Template.class))
            }),
            @ApiResponse(responseCode = "404", description = "Template not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/template/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Template> getTemplateById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"file_url\" : \"file_url\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"file_location\" : \"file_location\", \"id\" : 0, \"lastModified\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /template : Get all templates
     *
     * @return A list of templates (status code 200)
     */
    @Operation(
        operationId = "getTemplates",
        summary = "Get all templates",
        tags = { "Template Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of templates", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Template.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/template",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Template>> getTemplates(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"file_url\" : \"file_url\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"file_location\" : \"file_location\", \"id\" : 0, \"lastModified\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"file_url\" : \"file_url\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"file_location\" : \"file_location\", \"id\" : 0, \"lastModified\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /template/{id} : Update template by ID
     *
     * @param id  (required)
     * @param template  (required)
     * @return Template updated successfully (status code 200)
     *         or Template not found (status code 404)
     */
    @Operation(
        operationId = "updateTemplateById",
        summary = "Update template by ID",
        tags = { "Template Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Template updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Template.class))
            }),
            @ApiResponse(responseCode = "404", description = "Template not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/template/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Template> updateTemplateById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Template", description = "", required = true) @Valid @RequestBody Template template
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"file_url\" : \"file_url\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"file_location\" : \"file_location\", \"id\" : 0, \"lastModified\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
